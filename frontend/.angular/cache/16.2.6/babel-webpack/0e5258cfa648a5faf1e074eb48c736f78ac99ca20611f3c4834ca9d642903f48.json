{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { User } from '../models/User';\nimport { Validators } from '@angular/forms';\nexport let RestaurantInformationComponent = class RestaurantInformationComponent {\n  constructor(router, fb) {\n    this.router = router;\n    this.fb = fb;\n    this.user = new User();\n    this.restaurant = null;\n    this.reservationForm = this.fb.group({\n      date: ['', Validators.required],\n      time: ['', Validators.required],\n      numberOfPeople: ['', [Validators.required, Validators.min(1)]],\n      additionalRequests: ['']\n    });\n    this.feedbackMessage = '';\n  }\n  ngOnInit() {\n    this.reservationForm = this.fb.group({\n      date: ['', Validators.required],\n      time: ['', Validators.required],\n      numberOfPeople: ['', [Validators.required, Validators.min(1)]],\n      additionalRequests: ['']\n    });\n    let temp = localStorage.getItem(\"user\");\n    if (temp) {\n      this.user = JSON.parse(temp);\n      if (this.user.type != \"guest\") {\n        localStorage.removeItem(\"user\");\n        this.router.navigate([\"\"]);\n      }\n      if (this.user.accountStatus != 1) {\n        alert(\"This account is not active!\");\n        localStorage.removeItem(\"user\");\n        this.router.navigate([\"\"]);\n      }\n    } else {\n      this.router.navigate([\"\"]);\n    }\n    let temp2 = localStorage.getItem(\"restaurant\");\n    if (temp2) {\n      this.restaurant = JSON.parse(temp2);\n    } else {\n      alert(\"Error retrieving restaurant information! Returning to Home...\");\n      this.router.navigate([\"\"]);\n    }\n  }\n  onSubmit() {\n    if (this.reservationForm && this.reservationForm.valid) {\n      const reservation = this.reservationForm.value;\n      this.validateReservation(reservation);\n    } else {\n      this.feedbackMessage = 'Please fill in all required fields.';\n    }\n  }\n  validateReservation(reservation) {\n    const selectedDate = new Date(reservation.date);\n    const dayOfWeek = selectedDate.toLocaleString('en-US', {\n      weekday: 'long'\n    }).toLowerCase();\n    console.log(dayOfWeek);\n    const workingHours = this.restaurant.workingHours.find(hours => hours.day.toLowerCase() === dayOfWeek);\n    if (!workingHours) {\n      this.feedbackMessage = 'The restaurant is closed on the selected day.';\n      return;\n    }\n    const openTime = this.convertToMinutes(workingHours.open);\n    const closeTime = this.convertToMinutes(workingHours.close);\n    const reservationTime = this.convertToMinutes(reservation.time);\n    if (reservationTime < openTime || reservationTime > closeTime) {\n      this.feedbackMessage = 'The restaurant is not open at the selected time.';\n      return;\n    }\n    const availableTable = this.restaurant.layout.tables.find(table => table.maxPeople >= reservation.numberOfPeople);\n    if (!availableTable) {\n      this.feedbackMessage = 'No available table for the selected number of people.';\n      return;\n    }\n    this.feedbackMessage = 'Reservation successful!';\n    // Here, you would typically handle the reservation (e.g., save to a database)\n  }\n\n  convertToMinutes(time) {\n    const [hours, minutes] = time.split(':').map(Number);\n    return hours * 60 + minutes;\n  }\n  navigateTo(newPage) {\n    localStorage.setItem(\"page\", newPage.toString());\n    this.router.navigate([\"guest\"]);\n  }\n  logout() {\n    localStorage.removeItem(\"page\");\n    localStorage.removeItem(\"user\");\n    this.router.navigate([\"\"]);\n  }\n};\nRestaurantInformationComponent = __decorate([Component({\n  selector: 'app-restaurant-information',\n  templateUrl: './restaurant-information.component.html',\n  styleUrls: ['./restaurant-information.component.css']\n})], RestaurantInformationComponent);","map":{"version":3,"names":["Component","User","Validators","RestaurantInformationComponent","constructor","router","fb","user","restaurant","reservationForm","group","date","required","time","numberOfPeople","min","additionalRequests","feedbackMessage","ngOnInit","temp","localStorage","getItem","JSON","parse","type","removeItem","navigate","accountStatus","alert","temp2","onSubmit","valid","reservation","value","validateReservation","selectedDate","Date","dayOfWeek","toLocaleString","weekday","toLowerCase","console","log","workingHours","find","hours","day","openTime","convertToMinutes","open","closeTime","close","reservationTime","availableTable","layout","tables","table","maxPeople","minutes","split","map","Number","navigateTo","newPage","setItem","toString","logout","__decorate","selector","templateUrl","styleUrls"],"sources":["E:\\ETF\\Domaci i Projekti\\PIA Projekat\\frontend\\src\\app\\restaurant-information\\restaurant-information.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { User } from '../models/User';\nimport { Restaurant, Table, WorkingHours } from '../models/Restaurant';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\n\n@Component({\n  selector: 'app-restaurant-information',\n  templateUrl: './restaurant-information.component.html',\n  styleUrls: ['./restaurant-information.component.css']\n})\nexport class RestaurantInformationComponent implements OnInit {\n\n  constructor(private router: Router, private fb: FormBuilder)\n  {\n\n  }\n\n  ngOnInit(): void {\n    this.reservationForm = this.fb.group({\n      date: ['', Validators.required],\n      time: ['', Validators.required],\n      numberOfPeople: ['', [Validators.required, Validators.min(1)]],\n      additionalRequests: ['']\n    });\n\n    let temp = localStorage.getItem(\"user\")\n    if(temp)\n    {\n      this.user = JSON.parse(temp);\n\n      if (this.user.type != \"guest\")\n      {\n        localStorage.removeItem(\"user\")\n        this.router.navigate([\"\"]);\n      }\n      if (this.user.accountStatus != 1)\n      {\n        alert(\"This account is not active!\")\n        localStorage.removeItem(\"user\")\n        this.router.navigate([\"\"]);\n      }\n    }\n    else\n    {\n      this.router.navigate([\"\"]);\n    }\n\n    let temp2 = localStorage.getItem(\"restaurant\")\n    if (temp2)\n    {\n        this.restaurant = JSON.parse(temp2);\n    }\n    else\n    {\n      alert(\"Error retrieving restaurant information! Returning to Home...\");\n      this.router.navigate([\"\"]);\n    }\n  }\n\n  user: User = new User()\n  restaurant: any = null\n\n  reservationForm: FormGroup = this.fb.group({\n    date: ['', Validators.required],\n    time: ['', Validators.required],\n    numberOfPeople: ['', [Validators.required, Validators.min(1)]],\n    additionalRequests: ['']\n  });\n\n  feedbackMessage: string = '';\n\n  onSubmit(): void {\n    if (this.reservationForm && this.reservationForm.valid) {\n      const reservation = this.reservationForm.value;\n      this.validateReservation(reservation);\n    } else {\n      this.feedbackMessage = 'Please fill in all required fields.';\n    }\n  }\n\n  validateReservation(reservation: any): void {\n    const selectedDate = new Date(reservation.date);\n    const dayOfWeek = selectedDate.toLocaleString('en-US', { weekday: 'long' }).toLowerCase();\n    console.log(dayOfWeek)\n    const workingHours = this.restaurant.workingHours.find((hours:WorkingHours) => hours.day.toLowerCase() === dayOfWeek);\n\n    if (!workingHours) {\n      this.feedbackMessage = 'The restaurant is closed on the selected day.';\n      return;\n    }\n\n    const openTime = this.convertToMinutes(workingHours.open);\n    const closeTime = this.convertToMinutes(workingHours.close);\n    const reservationTime = this.convertToMinutes(reservation.time);\n\n    if (reservationTime < openTime || reservationTime > closeTime) {\n      this.feedbackMessage = 'The restaurant is not open at the selected time.';\n      return;\n    }\n\n    const availableTable = this.restaurant.layout.tables.find((table:Table) => table.maxPeople >= reservation.numberOfPeople);\n\n    if (!availableTable) {\n      this.feedbackMessage = 'No available table for the selected number of people.';\n      return;\n    }\n\n    this.feedbackMessage = 'Reservation successful!';\n    // Here, you would typically handle the reservation (e.g., save to a database)\n  }\n\n  convertToMinutes(time: string): number {\n    const [hours, minutes] = time.split(':').map(Number);\n    return hours * 60 + minutes;\n  }\n\n\n  navigateTo(newPage: number)\n  {\n    localStorage.setItem(\"page\", newPage.toString())\n    this.router.navigate([\"guest\"]) \n  }\n\n  logout()\n  {\n    localStorage.removeItem(\"page\")\n    localStorage.removeItem(\"user\")\n    this.router.navigate([\"\"])\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}