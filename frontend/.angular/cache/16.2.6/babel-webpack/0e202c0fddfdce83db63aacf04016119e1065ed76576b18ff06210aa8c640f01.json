{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class UserService {\n  constructor(http) {\n    this.http = http;\n  }\n  login(username, password) {\n    const data = {\n      username: username,\n      password: password\n    };\n    return this.http.post('http://localhost:4000/users/login', data);\n  }\n  uploadPicture(formData) {\n    return this.http.post('http://localhost:4000/users/uploadPicture', formData);\n  }\n  register(username, password, forename, surname, sex, type, address, email, contactPhone, securityQuestion, securityAnswer, profilePicure, creditCardNumber) {\n    const data = {\n      username: username,\n      password: password,\n      forename: forename,\n      surname: surname,\n      sex: sex,\n      type: type,\n      address: address,\n      email: email,\n      contactPhone: contactPhone,\n      securityQuestion: securityQuestion,\n      securityAnswer: securityAnswer,\n      profilePicure: profilePicure,\n      creditCardNumber: creditCardNumber\n    };\n    /*\n    if (profilePicure != null)\n    {\n      const formData = new FormData();\n      formData.append('profilePicture', profilePicure);\n      formData.append('username', username);\n      formData.append('forename', forename);\n      formData.append('surname', surname);\n      formData.append('sex', sex);\n      formData.append('type', type);\n      formData.append('surname', surname);\n           return this.http.post<string>('http://localhost:4000/users/register', formData);\n    }\n      */\n    return this.http.post('http://localhost:4000/users/register', data);\n  }\n  updateInfo(username, forename, surname, address, email, contactPhone,\n  // profilePicure: any,\n  creditCardNumber) {\n    const data = {\n      username: username,\n      forename: forename,\n      surname: surname,\n      address: address,\n      email: email,\n      contactPhone: contactPhone,\n      // profilePicure: profilePicure,\n      creditCardNumber: creditCardNumber\n    };\n    return this.http.post('http://localhost:4000/users/updateInfo', data);\n  }\n  getUsers() {\n    return this.http.get('http://localhost:4000/users/getUsers');\n  }\n  setStatus(username, accountStatus) {\n    const data = {\n      username: username,\n      accountStatus: accountStatus\n    };\n    return this.http.post('http://localhost:4000/users/setStatus', data);\n  }\n  resetPasswordKnow(username, oldPassword, newPassword) {\n    const data = {\n      username: username,\n      oldPassword: oldPassword,\n      newPassword: newPassword\n    };\n    return this.http.post('http://localhost:4000/users/resetPasswordKnow', data);\n  }\n  getSecurityDetails(username) {\n    const data = {\n      username: username\n    };\n    return this.http.post('http://localhost:4000/users/getSecurityDetails', data);\n  }\n  resetPasswordDontKnow(username, newPassword) {\n    const data = {\n      username: username,\n      newPassword: newPassword\n    };\n    return this.http.post('http://localhost:4000/users/resetPasswordDontKnow', data);\n  }\n  getReservations(username) {\n    const data = {\n      username: username\n    };\n    return this.http.post('http://localhost:4000/users/getReservations', data);\n  }\n  cancelReservation(reservation) {\n    return this.http.post('http://localhost:4000/users/cancelReservation', reservation);\n  }\n  static #_ = this.ɵfac = function UserService_Factory(t) {\n    return new (t || UserService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: UserService,\n    factory: UserService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["UserService","constructor","http","login","username","password","data","post","uploadPicture","formData","register","forename","surname","sex","type","address","email","contactPhone","securityQuestion","securityAnswer","profilePicure","creditCardNumber","updateInfo","getUsers","get","setStatus","accountStatus","resetPasswordKnow","oldPassword","newPassword","getSecurityDetails","resetPasswordDontKnow","getReservations","cancelReservation","reservation","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["E:\\ETF\\Domaci i Projekti\\PIA Projekat\\frontend\\src\\app\\services\\user.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { User } from '../models/User';\nimport { Reservation } from '../models/Reservation';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UserService {\n\n  constructor(private http: HttpClient) { }\n\n  login(username: string, password: string)\n  {\n    const data= {\n      username: username,\n      password: password,\n    }\n\n    return this.http.post<User>('http://localhost:4000/users/login', data);\n  }\n\n  uploadPicture(formData: FormData) {\n    return this.http.post<string>('http://localhost:4000/users/uploadPicture', formData);\n  }\n\n  register(\n    username: string,\n    password: string,\n    forename: string,\n    surname: string,\n    sex: string,\n    type: string,\n    address: string,\n    email: string,\n    contactPhone: number,\n    securityQuestion: string,\n    securityAnswer: string,\n    profilePicure: File | null,\n    creditCardNumber: number)\n  {\n    const data= {\n      username: username,\n      password: password,\n      forename: forename,\n      surname: surname,\n      sex: sex,\n      type: type,\n      address: address,\n      email: email,\n      contactPhone: contactPhone,\n      securityQuestion: securityQuestion,\n      securityAnswer: securityAnswer,\n      profilePicure: profilePicure,\n      creditCardNumber: creditCardNumber,\n    }\n\n    /*\n    if (profilePicure != null)\n    {\n      const formData = new FormData();\n      formData.append('profilePicture', profilePicure);\n      formData.append('username', username);\n      formData.append('forename', forename);\n      formData.append('surname', surname);\n      formData.append('sex', sex);\n      formData.append('type', type);\n      formData.append('surname', surname);\n\n      return this.http.post<string>('http://localhost:4000/users/register', formData);\n    }\n      */\n    \n\n    return this.http.post<string>('http://localhost:4000/users/register', data);\n  }\n\n  updateInfo(\n    username: string,\n    forename: string,\n    surname: string,\n    address: string,\n    email: string,\n    contactPhone: number,\n    // profilePicure: any,\n    creditCardNumber: number)\n  {\n    const data= {\n      username: username,\n      forename: forename,\n      surname: surname,\n      address: address,\n      email: email,\n      contactPhone: contactPhone,\n      // profilePicure: profilePicure,\n      creditCardNumber: creditCardNumber,\n    }\n\n    return this.http.post<string>('http://localhost:4000/users/updateInfo', data);\n  }\n\n  getUsers()\n  {\n    return this.http.get<User[]>('http://localhost:4000/users/getUsers');\n  }\n\n  setStatus(username: string, accountStatus: number)\n  {\n    const data= {\n      username: username,\n      accountStatus: accountStatus\n    }\n\n    return this.http.post<string>('http://localhost:4000/users/setStatus', data);\n  }\n\n  resetPasswordKnow(username: string, oldPassword: string, newPassword: string)\n  {\n    const data= {\n      username: username,\n      oldPassword: oldPassword,\n      newPassword: newPassword\n    }\n\n    return this.http.post<string>('http://localhost:4000/users/resetPasswordKnow', data);\n  }\n\n  getSecurityDetails(username: string)\n  {\n    const data= {\n      username: username,\n    }\n\n    return this.http.post<User>('http://localhost:4000/users/getSecurityDetails', data);\n  }\n\n  resetPasswordDontKnow(username: string, newPassword: string)\n  {\n    const data= {\n      username: username,\n      newPassword: newPassword\n    }\n\n    return this.http.post<string>('http://localhost:4000/users/resetPasswordDontKnow', data);\n  }\n\n  getReservations(username: string)\n  {\n    const data= {\n      username: username,\n    }\n\n    return this.http.post<Reservation[]>('http://localhost:4000/users/getReservations', data);\n  }\n\n  cancelReservation(reservation: Reservation)\n  {\n    return this.http.post<string>('http://localhost:4000/users/cancelReservation', reservation);\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}