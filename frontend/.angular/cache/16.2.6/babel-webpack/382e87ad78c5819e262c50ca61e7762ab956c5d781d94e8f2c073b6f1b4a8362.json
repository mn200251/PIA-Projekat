{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nexport let PocetnaComponent = class PocetnaComponent {\n  constructor(userService, router, restaurantService) {\n    this.userService = userService;\n    this.router = router;\n    this.restaurantService = restaurantService;\n    this.page = 0;\n    this.username = \"\";\n    this.password = \"\";\n    this.type = \"\";\n    this.error = \"\";\n    this.oldPassword = \"\";\n    this.newPassword = \"\";\n    this.confirmNewPassword = \"\";\n    this.userSecurityAnswer = \"\";\n    this.restaurants = [];\n    this.waiters = [];\n    this.numGuests = 0;\n    this.numRestaurants = 0;\n    this.numReservations24 = 0;\n    this.numReservations7 = 0;\n    this.numReservations30 = 0;\n    this.sortColumn = 'name';\n    this.sortOrder = 'asc';\n    this.searchName = '';\n    this.searchAddress = '';\n    this.searchType = '';\n    this.forename = \"\";\n    this.surname = \"\";\n    this.securityQuestion = \"\";\n    this.securityAnswer = \"\";\n    this.sex = \"\";\n    this.address = \"\";\n    this.contactPhone = 0;\n    this.email = \"\";\n    this.profilePicture = null;\n    this.creditCardNumber = 0;\n    this.sortCriteria = \"name\";\n  }\n  ngOnInit() {\n    localStorage.removeItem(\"user\");\n    this.restaurantService.getRestaurants().subscribe(data => {\n      this.numRestaurants = data.length;\n      this.restaurants = data;\n    });\n    this.userService.getUsers().subscribe(data => {\n      this.numGuests = data.filter(elem => {\n        if (elem.type == \"guest\") return true;\n        return false;\n      }).length;\n      this.waiters = data.filter(elem => {\n        if (elem.type == \"waiter\") return true;\n        return false;\n      });\n    });\n  }\n  navigateTo(newPage) {\n    this.clear();\n    this.page = newPage;\n  }\n  // clear all fields that are shared with login/register when switching\n  clear() {\n    this.username = \"\";\n    this.password = \"\";\n    this.type = \"\";\n    this.error = \"\";\n    this.forename = \"\";\n    this.surname = \"\";\n    this.securityQuestion = \"\";\n    this.securityAnswer = \"\";\n    this.sex = \"\";\n    this.address = \"\";\n    this.contactPhone = 0;\n    this.email = \"\";\n    this.profilePicture = null;\n    this.creditCardNumber = 0;\n    this.oldPassword = \"\";\n    this.newPassword = \"\";\n    this.confirmNewPassword = \"\";\n    this.userSecurityAnswer = \"\";\n  }\n  get sortedAndFilteredRestaurants() {\n    return this.restaurants.filter(restaurant => restaurant.name.toLowerCase().includes(this.searchName.toLowerCase()) && restaurant.address.toLowerCase().includes(this.searchAddress.toLowerCase()) && restaurant.type.toLowerCase().includes(this.searchType.toLowerCase())).sort((a, b) => {\n      const valueA = a[this.sortColumn];\n      const valueB = b[this.sortColumn];\n      let comparison = 0;\n      if (valueA > valueB) {\n        comparison = 1;\n      } else if (valueA < valueB) {\n        comparison = -1;\n      }\n      return this.sortOrder === 'asc' ? comparison : -comparison;\n    });\n  }\n  setSort(column) {\n    if (this.sortColumn === column) {\n      this.sortOrder = this.sortOrder === 'asc' ? 'desc' : 'asc';\n    } else {\n      this.sortColumn = column;\n      this.sortOrder = 'asc';\n    }\n  }\n  login() {\n    if (this.username == \"\" || this.password == \"\") {\n      this.error = \"Unesite sve podatke!\";\n      return;\n    }\n    this.userService.login(this.username, this.password).subscribe(data => {\n      if (data) {\n        if (data.accountStatus != 1) {\n          this.error = \"This account is not active!\";\n          localStorage.removeItem(\"user\");\n          this.router.navigate([\"\"]);\n        }\n        this.error = \"\";\n        localStorage.setItem(\"user\", JSON.stringify(data));\n        this.router.navigate([data.type]);\n      } else {\n        this.error = \"User with that password doesn't exist!\";\n      }\n    });\n  }\n  validatePassword(pw) {\n    const password = pw;\n    const validators = [this.isSizeBetween6And10, this.hasAtLeastOneCapitalLetter, this.hasAtLeastThreeSmallLetters, this.hasAtLeastOneNumber, this.hasAtLeastOneSpecialCharacter, this.startsWithLetter];\n    for (const validator of validators) {\n      const validationResult = validator(password);\n      if (validationResult !== true) {\n        this.error = validationResult;\n        return false;\n      }\n    }\n    return true;\n  }\n  isSizeBetween6And10(password) {\n    if (password.length >= 6 && password.length <= 10) {\n      return true;\n    }\n    return 'Password must be between 6 and 10 characters.';\n  }\n  hasAtLeastOneCapitalLetter(password) {\n    if (/[A-Z]/.test(password)) {\n      return true;\n    }\n    return 'Password must contain at least one capital letter.';\n  }\n  hasAtLeastThreeSmallLetters(password) {\n    const match = password.match(/[a-z]/g);\n    if (match && match.length >= 3) {\n      return true;\n    }\n    return 'Password must contain at least three small letters.';\n  }\n  hasAtLeastOneNumber(password) {\n    if (/\\d/.test(password)) {\n      return true;\n    }\n    return 'Password must contain at least one number.';\n  }\n  hasAtLeastOneSpecialCharacter(password) {\n    if (/[\\W_]/.test(password)) {\n      return true;\n    }\n    return 'Password must contain at least one special character.';\n  }\n  startsWithLetter(password) {\n    if (/^[A-Za-z]/.test(password)) {\n      return true;\n    }\n    return 'Password must start with a letter.';\n  }\n  register() {\n    this.type = \"guest\";\n    if (!this.username || !this.password || !this.securityQuestion || !this.securityAnswer || !this.forename || !this.surname || !this.sex || !this.address || !this.contactPhone || !this.email || !this.creditCardNumber) {\n      this.error = \"Please fill in all the required fields.\";\n      return;\n    }\n    // check if password is correct format\n    //const passwordPattern = /^(?=[A-Za-z])(?=.*[A-Z])(?=(?:.*[a-z]){3,})(?=.*\\d)(?=.*[!@#$%^&*])[A-Za-z\\d!@#$%^&*]{6,10}$/;\n    //const passwordPattern = /^[A-Za-z](?=.*[A-Z])(?=.*[a-z]{3,})(?=.*\\d)(?=.*[\\W_]).{5,9}$/;\n    //if (passwordPattern.test(this.password)) {\n    //  this.error = \"Password must be 6-10 characters long, start with a letter, contain at least 1 capital letter, at least 3 small letters, 1 number, and 1 special character.\";\n    //  return;\n    //}\n    if (!this.validatePassword(this.password)) {\n      return;\n    }\n    const inputElement = this.profilePicture.nativeElement;\n    if (inputElement && inputElement.files && inputElement.files.length > 0) {\n      const file = inputElement.files[0];\n      const validImageTypes = ['image/jpeg', 'image/png'];\n      if (!validImageTypes.includes(file.type)) {\n        this.error = \"Profile picture must be in JPG or PNG format.\";\n        return;\n      }\n      const img = new Image();\n      const objectUrl = URL.createObjectURL(file);\n      img.onload = () => {\n        if (img.width < 100 || img.height < 100 || img.width > 300 || img.height > 300) {\n          this.error = \"Profile picture dimensions must be between 100x100px and 300x300px.\";\n          URL.revokeObjectURL(objectUrl); // Clean up the object URL\n        } else {\n          this.error = \"\";\n          this.profilePicture = objectUrl;\n        }\n      };\n      img.onerror = () => {\n        this.error = \"Error loading the image.\";\n        URL.revokeObjectURL(objectUrl);\n      };\n      img.src = objectUrl;\n      this.userService.register(this.username, this.password, this.forename, this.surname, this.sex, this.type, this.address, this.email, this.contactPhone, this.securityQuestion, this.securityAnswer,\n      // img.src, // Pass the image data as a string\n      file, this.creditCardNumber).subscribe(data => {\n        alert(data.msg);\n        if (data.msg == \"Success!\") {\n          this.clear();\n          this.navigateTo(1);\n        }\n      });\n    }\n    // no picture provided\n    else {\n      this.userService.register(this.username, this.password, this.forename, this.surname, this.sex, this.type, this.address, this.email, this.contactPhone, this.securityQuestion, this.securityAnswer, null, this.creditCardNumber).subscribe(data => {\n        alert(data.msg);\n        if (data.msg == \"Success!\") {\n          this.clear();\n          this.navigateTo(1);\n        }\n      });\n    }\n  }\n  resetPasswordKnow() {\n    ////////////////////////////////////// add password check\n    if (!this.username || !this.oldPassword || !this.newPassword || !this.confirmNewPassword) {\n      this.error = \"Please fill in all the required fields.\";\n      return;\n    }\n    if (this.newPassword != this.confirmNewPassword) {\n      this.error = \"New password must be the same in both fields!\";\n      return;\n    }\n    /*\n    if (this.oldPassword == this.newPassword)\n    {\n      this.error = \"New password can not be same as old password!\";\n      return;\n    }\n    */\n    if (!this.validatePassword(this.newPassword)) return;\n    this.userService.resetPasswordKnow(this.username, this.oldPassword, this.newPassword).subscribe(data => {\n      alert(data.msg);\n      if (data.msg == 'Success!') {\n        this.clear();\n        this.navigateTo(1);\n      }\n    });\n  }\n  resetPasswordDontKnow(step) {\n    this.error = \"\";\n    if (step == 1) {\n      if (!this.username) {\n        this.error = \"Please enter your username!\";\n        return;\n      }\n      this.userService.getSecurityDetails(this.username).subscribe(data => {\n        if (data.msg == \"User not found!\") {\n          this.error = \"Username not found!\";\n          return;\n        }\n        this.securityQuestion = data.securityQuestion;\n        this.securityAnswer = data.securityAnswer;\n        this.error = \"\";\n        this.page = 322;\n      });\n    } else if (step == 2) {\n      if (this.userSecurityAnswer != this.securityAnswer) {\n        this.error = \"The answer is not correct!\";\n        return;\n      }\n      this.error = \"\";\n      this.page = 323;\n    } else\n      // step == 3\n      {\n        ////////////////////////////// check new password valid\n        if (!this.newPassword || !this.confirmNewPassword) {\n          this.error = \"Please enter both fields!\";\n          return;\n        }\n        if (this.newPassword != this.confirmNewPassword) {\n          this.error = \"New password must be the same in both fields!\";\n          return;\n        }\n        if (!this.validatePassword(this.newPassword)) return;\n        this.userService.resetPasswordDontKnow(this.username, this.newPassword).subscribe(data => {\n          alert(data.msg);\n          if (data.msg == 'Success!') {\n            this.clear();\n            this.navigateTo(1);\n          }\n        });\n      }\n  }\n};\nPocetnaComponent = __decorate([Component({\n  selector: 'app-pocetna',\n  templateUrl: './pocetna.component.html',\n  styleUrls: ['./pocetna.component.css']\n})], PocetnaComponent);","map":{"version":3,"names":["Component","PocetnaComponent","constructor","userService","router","restaurantService","page","username","password","type","error","oldPassword","newPassword","confirmNewPassword","userSecurityAnswer","restaurants","waiters","numGuests","numRestaurants","numReservations24","numReservations7","numReservations30","sortColumn","sortOrder","searchName","searchAddress","searchType","forename","surname","securityQuestion","securityAnswer","sex","address","contactPhone","email","profilePicture","creditCardNumber","sortCriteria","ngOnInit","localStorage","removeItem","getRestaurants","subscribe","data","length","getUsers","filter","elem","navigateTo","newPage","clear","sortedAndFilteredRestaurants","restaurant","name","toLowerCase","includes","sort","a","b","valueA","valueB","comparison","setSort","column","login","accountStatus","navigate","setItem","JSON","stringify","validatePassword","pw","validators","isSizeBetween6And10","hasAtLeastOneCapitalLetter","hasAtLeastThreeSmallLetters","hasAtLeastOneNumber","hasAtLeastOneSpecialCharacter","startsWithLetter","validator","validationResult","test","match","register","inputElement","nativeElement","files","file","validImageTypes","img","Image","objectUrl","URL","createObjectURL","onload","width","height","revokeObjectURL","onerror","src","alert","msg","resetPasswordKnow","resetPasswordDontKnow","step","getSecurityDetails","__decorate","selector","templateUrl","styleUrls"],"sources":["E:\\ETF\\Domaci i Projekti\\PIA Projekat\\frontend\\src\\app\\pocetna\\pocetna.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { UserService } from '../services/user.service';\nimport { RestaurantService } from '../services/restaurant.service';\nimport { Restaurant } from '../models/Restaurant';\nimport { User } from '../models/User';\n\n@Component({\n  selector: 'app-pocetna',\n  templateUrl: './pocetna.component.html',\n  styleUrls: ['./pocetna.component.css']\n})\nexport class PocetnaComponent implements OnInit {\n\n  constructor(private userService: UserService, private router: Router, private restaurantService: RestaurantService)\n  {\n\n  }\n\n  ngOnInit(): void {\n    localStorage.removeItem(\"user\")\n\n    this.restaurantService.getRestaurants().subscribe(data => {\n      this.numRestaurants = data.length\n\n      this.restaurants = data\n    })\n\n    this.userService.getUsers().subscribe(data => {\n      this.numGuests = data.filter(elem => {\n        if (elem.type == \"guest\")\n          return true\n        return false\n      }).length\n\n      this.waiters = data.filter(elem => {\n        if (elem.type == \"waiter\")\n          return true\n        return false\n      })\n    })\n  }\n\n\n\n  page: number = 0\n\n  username: string = \"\"\n  password: string = \"\"\n  type: string = \"\"\n  error: string = \"\"\n\n  oldPassword: string = \"\"\n  newPassword: string = \"\"\n  confirmNewPassword: string = \"\"\n\n  userSecurityAnswer: string = \"\"\n\n  restaurants: Restaurant[] = []\n  waiters: User[] = []\n  numGuests = 0\n  numRestaurants = 0\n  numReservations24 = 0\n  numReservations7 = 0\n  numReservations30 = 0\n\n  navigateTo(newPage: number)\n  {\n    this.clear()\n\n    this.page = newPage\n  }\n\n  // clear all fields that are shared with login/register when switching\n  clear()\n  {\n    this.username = \"\"\n    this.password = \"\"\n    this.type = \"\"\n    this.error = \"\"\n\n    this.forename = \"\"\n    this.surname = \"\"\n    this.securityQuestion = \"\"\n    this.securityAnswer = \"\"\n    this.sex = \"\"\n    this.address = \"\"\n    this.contactPhone = 0\n    this.email = \"\"\n    this.profilePicture = null\n    this.creditCardNumber = 0\n\n    this.oldPassword = \"\"\n    this.newPassword = \"\"\n    this.confirmNewPassword = \"\"\n\n    this.userSecurityAnswer = \"\"\n  }\n\n  sortColumn: keyof Restaurant = 'name';\n  sortOrder: 'asc' | 'desc' = 'asc';\n\n  searchName: string = '';\n  searchAddress: string = '';\n  searchType: string = '';\n\n  get sortedAndFilteredRestaurants(): Restaurant[] {\n    return this.restaurants\n      .filter(restaurant => \n        restaurant.name.toLowerCase().includes(this.searchName.toLowerCase()) &&\n        restaurant.address.toLowerCase().includes(this.searchAddress.toLowerCase()) &&\n        restaurant.type.toLowerCase().includes(this.searchType.toLowerCase())\n      )\n      .sort((a, b) => {\n        const valueA = a[this.sortColumn];\n        const valueB = b[this.sortColumn];\n        let comparison = 0;\n        if (valueA > valueB) {\n          comparison = 1;\n        } else if (valueA < valueB) {\n          comparison = -1;\n        }\n        return this.sortOrder === 'asc' ? comparison : -comparison;\n      });\n  }\n\n  setSort(column: keyof Restaurant): void {\n    if (this.sortColumn === column) {\n      this.sortOrder = this.sortOrder === 'asc' ? 'desc' : 'asc';\n    } else {\n      this.sortColumn = column;\n      this.sortOrder = 'asc';\n    }\n  }\n\n  login()\n  {\n    if (this.username == \"\" || this.password == \"\")\n    {\n      this.error = \"Unesite sve podatke!\";\n      return;\n    }\n\n    this.userService.login(this.username, this.password).subscribe(data =>{\n      if (data)\n      {\n        if (data.accountStatus != 1)\n        {\n          this.error = \"This account is not active!\"\n          localStorage.removeItem(\"user\")\n          this.router.navigate([\"\"]);\n        }\n\n        this.error = \"\"\n        localStorage.setItem(\"user\", JSON.stringify(data))\n        this.router.navigate([data.type]);\n      }\n      else\n      {\n        this.error = \"User with that password doesn't exist!\"\n      }\n    })\n  }\n\n  forename = \"\"\n  surname = \"\"\n  securityQuestion = \"\"\n  securityAnswer = \"\"\n  sex = \"\"\n  address = \"\"\n  contactPhone: number = 0\n  email = \"\"\n  profilePicture: any | null = null\n  creditCardNumber: number = 0\n  sortCriteria = \"name\"\n\n\n  validatePassword(pw: string): boolean {\n    const password = pw;\n\n    const validators = [\n      this.isSizeBetween6And10,\n      this.hasAtLeastOneCapitalLetter,\n      this.hasAtLeastThreeSmallLetters,\n      this.hasAtLeastOneNumber,\n      this.hasAtLeastOneSpecialCharacter,\n      this.startsWithLetter\n    ];\n\n    for (const validator of validators) {\n      const validationResult = validator(password);\n      if (validationResult !== true) {\n        this.error = validationResult;\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  isSizeBetween6And10(password: string): string | true {\n    if (password.length >= 6 && password.length <= 10) {\n      return true;\n    }\n    return 'Password must be between 6 and 10 characters.';\n  }\n\n  hasAtLeastOneCapitalLetter(password: string): string | true {\n    if (/[A-Z]/.test(password)) {\n      return true;\n    }\n    return 'Password must contain at least one capital letter.';\n  }\n\n  hasAtLeastThreeSmallLetters(password: string): string | true {\n    const match = password.match(/[a-z]/g);\n    if (match && match.length >= 3) {\n      return true;\n    }\n    return 'Password must contain at least three small letters.';\n  }\n\n  hasAtLeastOneNumber(password: string): string | true {\n    if (/\\d/.test(password)) {\n      return true;\n    }\n    return 'Password must contain at least one number.';\n  }\n\n  hasAtLeastOneSpecialCharacter(password: string): string | true {\n    if (/[\\W_]/.test(password)) {\n      return true;\n    }\n    return 'Password must contain at least one special character.';\n  }\n\n  startsWithLetter(password: string): string | true {\n    if (/^[A-Za-z]/.test(password)) {\n      return true;\n    }\n    return 'Password must start with a letter.';\n  }\n\n  register()\n  {\n    this.type = \"guest\"\n\n    if (!this.username || !this.password || !this.securityQuestion || !this.securityAnswer ||\n      !this.forename || !this.surname || !this.sex || !this.address || !this.contactPhone ||\n      !this.email || !this.creditCardNumber) {\n      this.error = \"Please fill in all the required fields.\";\n      return;\n    }\n\n    // check if password is correct format\n    //const passwordPattern = /^(?=[A-Za-z])(?=.*[A-Z])(?=(?:.*[a-z]){3,})(?=.*\\d)(?=.*[!@#$%^&*])[A-Za-z\\d!@#$%^&*]{6,10}$/;\n    //const passwordPattern = /^[A-Za-z](?=.*[A-Z])(?=.*[a-z]{3,})(?=.*\\d)(?=.*[\\W_]).{5,9}$/;\n\n    //if (passwordPattern.test(this.password)) {\n    //  this.error = \"Password must be 6-10 characters long, start with a letter, contain at least 1 capital letter, at least 3 small letters, 1 number, and 1 special character.\";\n    //  return;\n    //}\n\n    if (!this.validatePassword(this.password))\n    {\n      return;\n    }\n\n    const inputElement = this.profilePicture.nativeElement as HTMLInputElement;\n\n    if (inputElement && inputElement.files && inputElement.files.length > 0) {\n      const file = inputElement.files[0];\n      const validImageTypes = ['image/jpeg', 'image/png'];\n      \n      if (!validImageTypes.includes(file.type)) {\n        this.error = \"Profile picture must be in JPG or PNG format.\";\n        return;\n      }\n    \n      const img = new Image();\n      const objectUrl = URL.createObjectURL(file);\n      \n      img.onload = () => {\n        if (img.width < 100 || img.height < 100 || img.width > 300 || img.height > 300) {\n          this.error = \"Profile picture dimensions must be between 100x100px and 300x300px.\";\n          URL.revokeObjectURL(objectUrl); // Clean up the object URL\n        } else {\n          this.error = \"\";\n          this.profilePicture = objectUrl;\n        }\n      };\n\n      img.onerror = () => {\n        this.error = \"Error loading the image.\";\n        URL.revokeObjectURL(objectUrl);\n      };\n      img.src = objectUrl;\n\n        this.userService.register(\n          this.username,\n          this.password,\n          this.forename,\n          this.surname,\n          this.sex,\n          this.type,\n          this.address,\n          this.email,\n          this.contactPhone,\n          this.securityQuestion,\n          this.securityAnswer,\n          // img.src, // Pass the image data as a string\n          file,\n          this.creditCardNumber\n        ).subscribe((data:any) => {\n          alert(data.msg)\n          if (data.msg == \"Success!\") {\n            this.clear()\n            this.navigateTo(1)\n          }\n        });\n  \n    }\n      // no picture provided\n    else {\n      this.userService.register(\n          this.username,\n          this.password,\n          this.forename,\n          this.surname,\n          this.sex,\n          this.type,\n          this.address,\n          this.email,\n          this.contactPhone,\n          this.securityQuestion,\n          this.securityAnswer,\n          null,\n          this.creditCardNumber)\n        .subscribe((data:any) => {\n          alert(data.msg)\n          if (data.msg == \"Success!\")\n          {\n            this.clear()\n            this.navigateTo(1)\n          }\n\n        })\n    }\n\n  }\n\n  resetPasswordKnow()\n  {\n    ////////////////////////////////////// add password check\n\n    if (!this.username || !this.oldPassword || !this.newPassword || !this.confirmNewPassword) {\n      this.error = \"Please fill in all the required fields.\";\n      return;\n    }\n\n    if (this.newPassword != this.confirmNewPassword)\n    {\n      this.error = \"New password must be the same in both fields!\";\n      return;\n    }\n\n    /*\n    if (this.oldPassword == this.newPassword)\n    {\n      this.error = \"New password can not be same as old password!\";\n      return;\n    }\n    */\n    if (!this.validatePassword(this.newPassword))\n      return;\n\n    this.userService.resetPasswordKnow(this.username, this.oldPassword, this.newPassword).subscribe((data:any) => {\n      alert(data.msg)\n      if (data.msg == 'Success!')\n      {\n        this.clear()\n        this.navigateTo(1)\n      }\n\n    })\n  }\n\n  resetPasswordDontKnow(step: number)\n  {\n    this.error = \"\"\n\n    if (step == 1)\n    {\n      if (!this.username)\n      {\n        this.error = \"Please enter your username!\"\n        return\n      }\n\n      this.userService.getSecurityDetails(this.username).subscribe((data:any) => {\n\n        if (data.msg == \"User not found!\")\n        {\n            this.error = \"Username not found!\"\n            return\n        }\n\n        this.securityQuestion = data.securityQuestion\n        this.securityAnswer = data.securityAnswer\n\n\n        this.error = \"\"\n        this.page = 322\n      })\n    }\n    else if(step == 2)\n    {\n      if (this.userSecurityAnswer != this.securityAnswer)\n      {\n        this.error = \"The answer is not correct!\"\n        return\n      }\n\n      this.error = \"\"\n      this.page = 323\n    }\n    else // step == 3\n    {\n      ////////////////////////////// check new password valid\n\n      if (!this.newPassword || !this.confirmNewPassword)\n      {\n        this.error = \"Please enter both fields!\";\n        return;\n      }\n\n      if (this.newPassword != this.confirmNewPassword)\n      {\n        this.error = \"New password must be the same in both fields!\";\n        return;\n      }\n\n      if (!this.validatePassword(this.newPassword))\n        return;\n\n      this.userService.resetPasswordDontKnow(this.username, this.newPassword).subscribe((data:any) => {\n        alert(data.msg)\n        if (data.msg == 'Success!')\n        {\n          this.clear()\n          this.navigateTo(1)\n        }\n      })\n    \n\n    }\n  }\n\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}