{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nexport let PocetnaComponent = class PocetnaComponent {\n  constructor(userService, router, restaurantService) {\n    this.userService = userService;\n    this.router = router;\n    this.restaurantService = restaurantService;\n    this.page = 0;\n    this.username = \"\";\n    this.password = \"\";\n    this.type = \"\";\n    this.error = \"\";\n    this.oldPassword = \"\";\n    this.newPassword = \"\";\n    this.confirmNewPassword = \"\";\n    this.userSecurityAnswer = \"\";\n    this.restaurants = [];\n    this.waiters = [];\n    this.numGuests = 0;\n    this.numRestaurants = 0;\n    this.numReservations24 = 0;\n    this.numReservations7 = 0;\n    this.numReservations30 = 0;\n    this.forename = \"\";\n    this.surname = \"\";\n    this.securityQuestion = \"\";\n    this.securityAnswer = \"\";\n    this.sex = \"\";\n    this.address = \"\";\n    this.contactPhone = null;\n    this.email = \"\";\n    this.profilePicure = null;\n    this.creditCardNumber = null;\n  }\n  ngOnInit() {\n    localStorage.removeItem(\"user\");\n    this.restaurantService.getRestaurants().subscribe(data => {\n      this.numRestaurants = data.length;\n      this.restaurants = data;\n    });\n    this.userService.getUsers().subscribe(data => {\n      this.numGuests = data.filter(elem => {\n        if (elem.type == \"guest\") return true;\n        return false;\n      }).length;\n      this.waiters = data.filter(elem => {\n        if (elem.type == \"waiter\") return true;\n        return false;\n      });\n    });\n  }\n  navigateTo(newPage) {\n    this.clear();\n    this.page = newPage;\n  }\n  // clear all fields that are shared with login/register when switching\n  clear() {\n    this.username = \"\";\n    this.password = \"\";\n    this.type = \"\";\n    this.error = \"\";\n    this.forename = \"\";\n    this.surname = \"\";\n    this.securityQuestion = \"\";\n    this.securityAnswer = \"\";\n    this.sex = \"\";\n    this.address = \"\";\n    this.contactPhone = null;\n    this.email = \"\";\n    this.profilePicure = null;\n    this.creditCardNumber = null;\n    this.oldPassword = \"\";\n    this.newPassword = \"\";\n    this.confirmNewPassword = \"\";\n    this.userSecurityAnswer = \"\";\n  }\n  login() {\n    if (this.username == \"\" || this.password == \"\") {\n      this.error = \"Unesite sve podatke!\";\n      return;\n    }\n    this.userService.login(this.username, this.password).subscribe(data => {\n      if (data) {\n        if (data.accountStatus != 1) {\n          this.error = \"This account is not active!\";\n          localStorage.removeItem(\"user\");\n          this.router.navigate([\"\"]);\n        }\n        this.error = \"\";\n        localStorage.setItem(\"user\", JSON.stringify(data));\n        this.router.navigate([data.type]);\n      } else {\n        this.error = \"User with that password doesn't exist!\";\n      }\n    });\n  }\n  register() {\n    this.type = \"guest\";\n    if (!this.username || !this.password || !this.securityQuestion || !this.securityAnswer || !this.forename || !this.surname || !this.sex || !this.address || !this.contactPhone || !this.email || !this.creditCardNumber) {\n      this.error = \"Please fill in all the required fields.\";\n      return;\n    }\n    // check if password is correct format\n    const passwordPattern = /^(?=[A-Za-z])(?=.*[A-Z])(?=(?:.*[a-z]){3,})(?=.*\\d)(?=.*[!@#$%^&*])[A-Za-z\\d!@#$%^&*]{6,10}$/;\n    if (passwordPattern.test(this.password)) {\n      this.error = \"Password must be 6-10 characters long, start with a letter, contain at least 1 capital letter, at least 3 small letters, 1 number, and 1 special character.\";\n      return;\n    }\n    // check if picture is correct format\n    if (this.profilePicure && this.profilePicure.files.length > 0) {\n      const file = this.profilePicure.files[0];\n      const validImageTypes = ['image/jpeg', 'image/png'];\n      if (!validImageTypes.includes(file.type)) {\n        this.error = \"Profile picture must be in JPG or PNG format.\";\n        return;\n      }\n      const img = new Image();\n      img.onload = () => {\n        if (img.width < 100 || img.height < 100 || img.width > 300 || img.height > 300) {\n          this.error = \"Profile picture dimensions must be between 100x100px and 300x300px.\";\n          return;\n        } else {\n          this.error = \"\"; // Clear error if all checks pass\n          // this.completeRegistration();\n        }\n      };\n      // ???\n      const reader = new FileReader();\n      reader.onload = e => {\n        img.src = e.target.result;\n      };\n      reader.readAsDataURL(file);\n    }\n    // no picture provided\n    else {\n      this.userService.register(this.username, this.password, this.forename, this.surname, this.sex, this.type, this.address, this.email, this.contactPhone, this.securityQuestion, this.securityAnswer,\n      // this.profilePicure,\n      this.creditCardNumber).subscribe(data => {\n        this.clear();\n        alert(data.msg);\n      });\n    }\n  }\n  resetPasswordKnow() {\n    ////////////////////////////////////// add password check\n    if (!this.username || !this.oldPassword || !this.newPassword || !this.confirmNewPassword) {\n      this.error = \"Please fill in all the required fields.\";\n      return;\n    }\n    if (this.newPassword != this.confirmNewPassword) {\n      this.error = \"New password must be the same in both fields!\";\n      return;\n    }\n    if (this.oldPassword == this.newPassword) {\n      this.error = \"New password can not be same as old password!\";\n      return;\n    }\n    this.userService.resetPasswordKnow(this.username, this.oldPassword, this.newPassword).subscribe(data => {\n      alert(data.msg);\n      if (data.msg == 'Success!') {\n        this.clear();\n        this.navigateTo(1);\n      }\n    });\n  }\n  resetPasswordDontKnow(step) {\n    this.error = \"\";\n    if (step == 1) {\n      if (!this.username) {\n        this.error = \"Please enter your username!\";\n        return;\n      }\n      this.userService.getSecurityDetails(this.username).subscribe(data => {\n        if (data.msg == \"User not found!\") {\n          this.error = \"Username not found!\";\n          return;\n        }\n        this.securityQuestion = data.securityQuestion;\n        this.securityAnswer = data.securityAnswer;\n        this.error = \"\";\n        this.page = 322;\n      });\n    } else if (step == 2) {\n      if (this.userSecurityAnswer != this.securityAnswer) {\n        this.error = \"The answer is not correct!\";\n        return;\n      }\n      this.error = \"\";\n      this.page = 323;\n    } else\n      // step == 3\n      {\n        ////////////////////////////// check new password valid\n        if (!this.newPassword || !this.confirmNewPassword) {\n          this.error = \"Please enter both fields!\";\n          return;\n        }\n        if (this.newPassword != this.confirmNewPassword) {\n          this.error = \"New password must be the same in both fields!\";\n          return;\n        }\n        this.userService.resetPasswordDontKnow(this.username, this.newPassword).subscribe(data => {\n          alert(data.msg);\n          if (data.msg == 'Success!') {\n            this.clear();\n            this.navigateTo(1);\n          }\n        });\n      }\n  }\n};\nPocetnaComponent = __decorate([Component({\n  selector: 'app-pocetna',\n  templateUrl: './pocetna.component.html',\n  styleUrls: ['./pocetna.component.css']\n})], PocetnaComponent);","map":{"version":3,"names":["Component","PocetnaComponent","constructor","userService","router","restaurantService","page","username","password","type","error","oldPassword","newPassword","confirmNewPassword","userSecurityAnswer","restaurants","waiters","numGuests","numRestaurants","numReservations24","numReservations7","numReservations30","forename","surname","securityQuestion","securityAnswer","sex","address","contactPhone","email","profilePicure","creditCardNumber","ngOnInit","localStorage","removeItem","getRestaurants","subscribe","data","length","getUsers","filter","elem","navigateTo","newPage","clear","login","accountStatus","navigate","setItem","JSON","stringify","register","passwordPattern","test","files","file","validImageTypes","includes","img","Image","onload","width","height","reader","FileReader","e","src","target","result","readAsDataURL","alert","msg","resetPasswordKnow","resetPasswordDontKnow","step","getSecurityDetails","__decorate","selector","templateUrl","styleUrls"],"sources":["E:\\ETF\\Domaci i Projekti\\PIA Projekat\\frontend\\src\\app\\pocetna\\pocetna.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { UserService } from '../services/user.service';\nimport { RestaurantService } from '../services/restaurant.service';\nimport { Restaurant } from '../models/Restaurant';\nimport { User } from '../models/User';\n\n@Component({\n  selector: 'app-pocetna',\n  templateUrl: './pocetna.component.html',\n  styleUrls: ['./pocetna.component.css']\n})\nexport class PocetnaComponent implements OnInit {\n\n  constructor(private userService: UserService, private router: Router, private restaurantService: RestaurantService)\n  {\n\n  }\n\n  ngOnInit(): void {\n    localStorage.removeItem(\"user\")\n\n    this.restaurantService.getRestaurants().subscribe(data => {\n      this.numRestaurants = data.length\n\n      this.restaurants = data\n    })\n\n    this.userService.getUsers().subscribe(data => {\n      this.numGuests = data.filter(elem => {\n        if (elem.type == \"guest\")\n          return true\n        return false\n      }).length\n\n      this.waiters = data.filter(elem => {\n        if (elem.type == \"waiter\")\n          return true\n        return false\n      })\n    })\n  }\n\n\n\n  page: number = 0\n\n  username: string = \"\"\n  password: string = \"\"\n  type: string = \"\"\n  error: string = \"\"\n\n  oldPassword: string = \"\"\n  newPassword: string = \"\"\n  confirmNewPassword: string = \"\"\n\n  userSecurityAnswer: string = \"\"\n\n  restaurants: Restaurant[] = []\n  waiters: User[] = []\n  numGuests = 0\n  numRestaurants = 0\n  numReservations24 = 0\n  numReservations7 = 0\n  numReservations30 = 0\n\n  navigateTo(newPage: number)\n  {\n    this.clear()\n\n    this.page = newPage\n  }\n\n  // clear all fields that are shared with login/register when switching\n  clear()\n  {\n    this.username = \"\"\n    this.password = \"\"\n    this.type = \"\"\n    this.error = \"\"\n\n    this.forename = \"\"\n    this.surname = \"\"\n    this.securityQuestion = \"\"\n    this.securityAnswer = \"\"\n    this.sex = \"\"\n    this.address = \"\"\n    this.contactPhone = null\n    this.email = \"\"\n    this.profilePicure = null\n    this.creditCardNumber = null\n\n    this.oldPassword = \"\"\n    this.newPassword = \"\"\n    this.confirmNewPassword = \"\"\n\n    this.userSecurityAnswer = \"\"\n  }\n\n\n  login()\n  {\n    if (this.username == \"\" || this.password == \"\")\n    {\n      this.error = \"Unesite sve podatke!\";\n      return;\n    }\n\n    this.userService.login(this.username, this.password).subscribe(data =>{\n      if (data)\n      {\n        if (data.accountStatus != 1)\n        {\n          this.error = \"This account is not active!\"\n          localStorage.removeItem(\"user\")\n          this.router.navigate([\"\"]);\n        }\n\n        this.error = \"\"\n        localStorage.setItem(\"user\", JSON.stringify(data))\n        this.router.navigate([data.type]);\n      }\n      else\n      {\n        this.error = \"User with that password doesn't exist!\"\n      }\n    })\n  }\n\n  forename = \"\"\n  surname = \"\"\n  securityQuestion = \"\"\n  securityAnswer = \"\"\n  sex = \"\"\n  address = \"\"\n  contactPhone: number | null = null\n  email = \"\"\n  profilePicure: any | null = null\n  creditCardNumber: number | null = null\n\n\n  register()\n  {\n    this.type = \"guest\"\n\n    if (!this.username || !this.password || !this.securityQuestion || !this.securityAnswer ||\n      !this.forename || !this.surname || !this.sex || !this.address || !this.contactPhone ||\n      !this.email || !this.creditCardNumber) {\n      this.error = \"Please fill in all the required fields.\";\n      return;\n    }\n\n    // check if password is correct format\n    const passwordPattern = /^(?=[A-Za-z])(?=.*[A-Z])(?=(?:.*[a-z]){3,})(?=.*\\d)(?=.*[!@#$%^&*])[A-Za-z\\d!@#$%^&*]{6,10}$/\n    ;\n\n    if (passwordPattern.test(this.password)) {\n      this.error = \"Password must be 6-10 characters long, start with a letter, contain at least 1 capital letter, at least 3 small letters, 1 number, and 1 special character.\";\n      return;\n    }\n\n    // check if picture is correct format\n    if (this.profilePicure && this.profilePicure.files.length > 0) {\n      const file = this.profilePicure.files[0];\n      const validImageTypes = ['image/jpeg', 'image/png'];\n      if (!validImageTypes.includes(file.type)) {\n        this.error = \"Profile picture must be in JPG or PNG format.\";\n        return;\n      }\n      const img = new Image();\n      img.onload = () => {\n        if (img.width < 100 || img.height < 100 || img.width > 300 || img.height > 300) {\n          this.error = \"Profile picture dimensions must be between 100x100px and 300x300px.\";\n          return;\n        } else {\n          this.error = \"\"; // Clear error if all checks pass\n          // this.completeRegistration();\n        }\n      };\n    \n\n      // ???\n      const reader = new FileReader();\n        reader.onload = (e: any) => {\n          img.src = e.target.result;\n        };\n        reader.readAsDataURL(file);\n      } \n      // no picture provided\n      else {\n        this.userService.register(this.username,\n          this.password,\n          this.forename,\n          this.surname,\n          this.sex,\n          this.type,\n          this.address,\n          this.email,\n          this.contactPhone,\n          this.securityQuestion,\n          this.securityAnswer,\n          // this.profilePicure,\n          this.creditCardNumber)\n          .subscribe((data:any) => {\n            this.clear()\n            alert(data.msg)\n        })\n      }\n\n\n\n  }\n\n  resetPasswordKnow()\n  {\n    ////////////////////////////////////// add password check\n\n    if (!this.username || !this.oldPassword || !this.newPassword || !this.confirmNewPassword) {\n      this.error = \"Please fill in all the required fields.\";\n      return;\n    }\n\n    if (this.newPassword != this.confirmNewPassword)\n    {\n      this.error = \"New password must be the same in both fields!\";\n      return;\n    }\n\n    if (this.oldPassword == this.newPassword)\n    {\n      this.error = \"New password can not be same as old password!\";\n      return;\n    }\n\n    this.userService.resetPasswordKnow(this.username, this.oldPassword, this.newPassword).subscribe((data:any) => {\n      alert(data.msg)\n      if (data.msg == 'Success!')\n      {\n        this.clear()\n        this.navigateTo(1)\n      }\n\n    })\n  }\n\n  resetPasswordDontKnow(step: number)\n  {\n    this.error = \"\"\n\n    if (step == 1)\n    {\n      if (!this.username)\n      {\n        this.error = \"Please enter your username!\"\n        return\n      }\n\n      this.userService.getSecurityDetails(this.username).subscribe((data:any) => {\n\n        if (data.msg == \"User not found!\")\n        {\n            this.error = \"Username not found!\"\n            return\n        }\n\n        this.securityQuestion = data.securityQuestion\n        this.securityAnswer = data.securityAnswer\n\n\n        this.error = \"\"\n        this.page = 322\n      })\n    }\n    else if(step == 2)\n    {\n      if (this.userSecurityAnswer != this.securityAnswer)\n      {\n        this.error = \"The answer is not correct!\"\n        return\n      }\n\n      this.error = \"\"\n      this.page = 323\n    }\n    else // step == 3\n    {\n      ////////////////////////////// check new password valid\n\n      if (!this.newPassword || !this.confirmNewPassword)\n      {\n        this.error = \"Please enter both fields!\";\n        return;\n      }\n\n      if (this.newPassword != this.confirmNewPassword)\n      {\n        this.error = \"New password must be the same in both fields!\";\n        return;\n      }\n\n      this.userService.resetPasswordDontKnow(this.username, this.newPassword).subscribe((data:any) => {\n        alert(data.msg)\n        if (data.msg == 'Success!')\n        {\n          this.clear()\n          this.navigateTo(1)\n        }\n      })\n    \n\n    }\n  }\n\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}