{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class RestaurantService {\n  constructor(http) {\n    this.http = http;\n  }\n  addRestaurant(restaurant) {\n    return this.http.post('http://localhost:4000/restaurants/addRestaurant', restaurant);\n  }\n  getRestaurants() {\n    return this.http.get('http://localhost:4000/restaurants/getRestaurants');\n  }\n  addWaiter(waiter) {\n    return this.http.post('http://localhost:4000/restaurants/addWaiter', waiter);\n  }\n  addReservation(reservation) {\n    return this.http.post('http://localhost:4000/restaurants/addReservation', reservation);\n  }\n  getReservations() {\n    return this.http.get('http://localhost:4000/restaurants/getReservations');\n  }\n  getAvailableTables(restaurantName, startTime, endTime, numberOfPeople) {\n    return this.http.post('http://localhost:4000/restaurants/getAvailableTables', {\n      restaurantName,\n      startTime,\n      endTime,\n      numberOfPeople\n    });\n  }\n  confirmReservation(reservation) {\n    const data = {\n      username: reservation.username,\n      restaurantName: reservation.restaurantName,\n      startTime: reservation.startTime,\n      endTime: reservation.endTime,\n      numberOfPeople: reservation.numberOfPeople,\n      additionalRequests: reservation.additionalRequests,\n      tableId: reservation.tableId,\n      confirmedByWaiter: reservation.confirmedByWaiter\n    };\n    return this.http.post('http://localhost:4000/restaurants/confirmReservation', data);\n  }\n  rejectReservation(reservation) {\n    const data = {\n      username: reservation.username,\n      restaurantName: reservation.restaurantName,\n      startTime: reservation.startTime,\n      endTime: reservation.endTime,\n      numberOfPeople: reservation.numberOfPeople,\n      additionalRequests: reservation.additionalRequests,\n      tableId: reservation.tableId,\n      confirmedByWaiter: reservation.confirmedByWaiter,\n      showedUp: reservation.showedUp\n    };\n    return this.http.post('http://localhost:4000/restaurants/rejectReservation', data);\n  }\n  showedUp(reservation) {\n    const data = {\n      username: reservation.username,\n      restaurantName: reservation.restaurantName,\n      startTime: reservation.startTime,\n      endTime: reservation.endTime,\n      numberOfPeople: reservation.numberOfPeople,\n      additionalRequests: reservation.additionalRequests,\n      tableId: reservation.tableId,\n      confirmedByWaiter: reservation.confirmedByWaiter,\n      showedUp: reservation.showedUp\n    };\n    return this.http.post('http://localhost:4000/restaurants/showedUp', data);\n  }\n  addMenuItem(restaurantName, menuItem) {\n    /*\n    const data = {\n      restaurantName,\n      name: menuItem.name,\n      price: menuItem.price,\n      ingredients: menuItem.ingredients,\n      imageLink: menuItem.imageLink,\n    }\n    */\n    return this.http.post('http://localhost:4000/restaurants/addMenuItem', {\n      restaurantName,\n      menuItem\n    });\n  }\n  getOrders(username) {\n    return this.http.get('http://localhost:4000/restaurants/getOrders/' + username);\n  }\n  static #_ = this.ɵfac = function RestaurantService_Factory(t) {\n    return new (t || RestaurantService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: RestaurantService,\n    factory: RestaurantService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["RestaurantService","constructor","http","addRestaurant","restaurant","post","getRestaurants","get","addWaiter","waiter","addReservation","reservation","getReservations","getAvailableTables","restaurantName","startTime","endTime","numberOfPeople","confirmReservation","data","username","additionalRequests","tableId","confirmedByWaiter","rejectReservation","showedUp","addMenuItem","menuItem","getOrders","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["E:\\ETF\\Domaci i Projekti\\PIA Projekat\\frontend\\src\\app\\services\\restaurant.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { MenuItem, Restaurant } from '../models/Restaurant';\nimport { HttpClient } from '@angular/common/http';\nimport { User } from '../models/User';\nimport { Reservation } from '../models/Reservation';\nimport { Order } from '../models/Order';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RestaurantService {\n\n  constructor(private http: HttpClient) { }\n\n  addRestaurant(restaurant: Restaurant)\n  {\n    return this.http.post<Restaurant>('http://localhost:4000/restaurants/addRestaurant', restaurant);\n  }\n\n  getRestaurants()\n  {\n    return this.http.get<Restaurant[]>('http://localhost:4000/restaurants/getRestaurants');\n  }\n\n  addWaiter(waiter: User)\n  {\n    return this.http.post<string>('http://localhost:4000/restaurants/addWaiter', waiter);\n  }\n\n  addReservation(reservation: Reservation)\n  {\n    return this.http.post<string>('http://localhost:4000/restaurants/addReservation', reservation);\n  }\n\n  getReservations()\n  {\n    return this.http.get<Reservation[]>('http://localhost:4000/restaurants/getReservations');\n  }\n\n  getAvailableTables(restaurantName: string, startTime: Date, endTime: Date, numberOfPeople: number)\n  {\n    return this.http.post<number[]>('http://localhost:4000/restaurants/getAvailableTables', \n      {restaurantName, startTime, endTime, numberOfPeople});\n  }\n\n  confirmReservation(reservation: Reservation)\n  {\n    const data = {\n      username: reservation.username,\n      restaurantName: reservation.restaurantName,\n      startTime: reservation.startTime,\n      endTime: reservation.endTime,\n      numberOfPeople: reservation.numberOfPeople,\n      additionalRequests: reservation.additionalRequests,\n      tableId: reservation.tableId,\n      confirmedByWaiter: reservation.confirmedByWaiter,\n    }\n\n    return this.http.post<string>('http://localhost:4000/restaurants/confirmReservation', data);\n  }\n\n  rejectReservation(reservation: Reservation)\n  {\n    const data = {\n      username: reservation.username,\n      restaurantName: reservation.restaurantName,\n      startTime: reservation.startTime,\n      endTime: reservation.endTime,\n      numberOfPeople: reservation.numberOfPeople,\n      additionalRequests: reservation.additionalRequests,\n      tableId: reservation.tableId,\n      confirmedByWaiter: reservation.confirmedByWaiter,\n      showedUp: reservation.showedUp,\n    }\n\n    return this.http.post<string>('http://localhost:4000/restaurants/rejectReservation', data);\n  }\n\n  showedUp(reservation: Reservation)\n  {\n    const data = {\n      username: reservation.username,\n      restaurantName: reservation.restaurantName,\n      startTime: reservation.startTime,\n      endTime: reservation.endTime,\n      numberOfPeople: reservation.numberOfPeople,\n      additionalRequests: reservation.additionalRequests,\n      tableId: reservation.tableId,\n      confirmedByWaiter: reservation.confirmedByWaiter,\n      showedUp: reservation.showedUp,\n    }\n\n    return this.http.post<string>('http://localhost:4000/restaurants/showedUp', data);\n  }\n\n  addMenuItem(restaurantName: string, menuItem: MenuItem)\n  {\n    /*\n    const data = {\n      restaurantName,\n      name: menuItem.name,\n      price: menuItem.price,\n      ingredients: menuItem.ingredients,\n      imageLink: menuItem.imageLink,\n    }\n    */\n\n    return this.http.post<string>('http://localhost:4000/restaurants/addMenuItem', {restaurantName, menuItem});\n  }\n\n  getOrders(username: string)\n  {\n    return this.http.get<Order[]>('http://localhost:4000/restaurants/getOrders/' + username);\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}